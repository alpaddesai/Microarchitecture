<Window x:Class="Microarchitecture.PipelineConcepts"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Microarchitecture"
        mc:Ignorable="d"
        Title="PipelineConcepts" Height="692.739" Width="1165.975" MaxWidth="1166" MaxHeight="692">
    <Grid>
        <Grid.Background>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="Black" Offset="0"/>
                <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
            </LinearGradientBrush>
        </Grid.Background>
        <RichTextBox HorizontalAlignment="Left" Height="625" Margin="31,14,0,0" VerticalAlignment="Top" Width="1107" FontSize="10">
            <FlowDocument>
                <Paragraph BorderBrush="Black" BorderThickness="0,0,0,1" FontWeight="Bold" FontFamily="Cambria" Margin="0,13.33,0,0" Padding="1.33" TextAlignment="Left">
                    <Span Foreground="#FF4F81BD">
                        <Run Text="Appendix C: Pipelining Basic and Intermediate Concepts"/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0,16,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="Pipelining is an implementation technique that takes advantage of instruction level parallelism.  Pipelining yields a reduction in the average execution time per instruction.  If we are not starting with a CPI of one and we are able to implement pipelining and achieve a CPI of 1 then we have successfully implemented pipelining. "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="Example: RISC Instruction set without pipelining"/>
                    </Span>
                </Paragraph>
                <List MarkerStyle="Disc" Margin="0" Padding="0" StartIndex="7">
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span>
                                <Run Text="Instruction fetch cycle (IF)  "/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span>
                                <Run Text="Instruction decode  / register fetch cycle (ID)"/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span>
                                <Run Text="Execution / effective address cycle (EX) "/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span>
                                <Run Text="Memory access (MEM)"/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span>
                                <Run Text="Write-back cycle (WB)"/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                </List>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="By starting a new instruction on each clock cycle, we can implement pipelining; this would be a classic 5 stage pipeline for a RISC processor.   A few key elements, separate data and instruction caches are utilized for this classic 5 stage pipeline.   The use of separate caches eliminates a conflict for a single memory that would arise between instruction fetch and data memory access.   If the pipelined processor has a clock cycle equal to the un-pipelined version the memory system must deliver 5x the BW.    To ensure that instructions in different stages of the pipeline do not interfere with each other, pipeline registers are utilized between successive stages of the pipeline."/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="Pipelining increases the processor instruction throughput, the # of instructions completed per unit time, it cannot decrease the execution time of the individual instruction. Hence there is a limit to the practical depth of a pipeline.      "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="There might be an execution time difference amongst the various instructions, hence the clock can run no faster that the time needed for the slowest pipeline stage.    "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="Pipeline overhead arises from the combination of pipeline register delay and clock skew. The pipeline registers add set up time plus propagation delay to the clock cycle.  Clock skew is the maximum delay between when the clock arrives at any two registers and contributes to the lower limit on the clock cycle. "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="What are pipeline hazards? "/>
                    </Span>
                </Paragraph>
                <List MarkerStyle="Disc" Margin="0" Padding="0" StartIndex="7">
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span FontWeight="Bold">
                                <Run Text="Structural hazards"/>
                            </Span>
                            <Span>
                                <Run Text=":  Caused from resource conflicts when HW cannot support all possible combinations of instructions simultaneously in overlapped execution."/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span FontWeight="Bold">
                                <Run Text="Data hazards"/>
                            </Span>
                            <Span>
                                <Run Text=":  Caused when an instruction depends on the data and results of a previous instruction.  Examples include "/>
                            </Span>
                            <Span FontStyle="Italic">
                                <Run Text="Read After Write"/>
                            </Span>
                            <Span>
                                <Run Text=" (RAW) hazard, "/>
                            </Span>
                            <Span FontStyle="Italic">
                                <Run Text="Write After Read"/>
                            </Span>
                            <Span>
                                <Run Text=" (WAR) hazard, "/>
                            </Span>
                            <Span FontStyle="Italic">
                                <Run Text="Write After Write"/>
                            </Span>
                            <Span>
                                <Run Text=" (WAW) hazard.  Methods to avoid data hazards include simple HW techniques called forwarding.  The result is moved from the pipeline register where add stores it to where the following instruction needs it, then a stall is avoided.  Other alternative options include "/>
                            </Span>
                            <Span FontStyle="Italic">
                                <Run Text="pipeline interlock. "/>
                            </Span>
                            <Span>
                                <Run Text="The "/>
                            </Span>
                            <Span FontStyle="Italic">
                                <Run Text="interlock"/>
                            </Span>
                            <Span>
                                <Run Text=" detects a hazard and stalls the pipeline until the hazard is cleared. "/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span FontWeight="Bold">
                                <Run Text="Control hazards"/>
                            </Span>
                            <Span>
                                <Run Text=":  Caused from pipelining of branches.  It creates a greater performance loss for our RISC V pipeline.  When a branch is executed it may or may not be taken hence the PC needs to be managed.  The simplest method is to redo the fetch of the instruction following a branch once we detect the branch during decode, this introduces a stall. "/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span FontWeight="Bold">
                                <Run Text="Reducing pipeline branch penalties"/>
                            </Span>
                            <Span>
                                <Run Text=":   SW can reduce a branch penalty by static branch prediction it involves knowledge of the HW scheme and the branch behavior. This is compile time branch prediction. HW can reduce a branch penalty through dynamic branch prediction. The simplest scheme is branch prediction buffer or branch history table."/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                    <ListItem Margin="48,0,0,0">
                        <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                            <Span FontWeight="Bold">
                                <Run Text="Pipeline latency"/>
                            </Span>
                            <Span>
                                <Run Text=":  It is equal to one cycle less than the depth of the execution pipeline, which is the number of stages from the EX stage to the stage that produces the result. To achieve a higher clock rate, designers need to put fewer logic levels in each pipe stage which makes the number of pipe stages required for larger operations larger.  Hence the penalty for the faster clock rate is longer latency for operations. "/>
                            </Span>
                        </Paragraph>
                    </ListItem>
                </List>
                <Paragraph FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Span>
                        <Run Text="Hazards can cause a stall in the pipeline. Avoiding hazards often requires that some instructions in the pipeline proceed while others are delayed. "/>
                    </Span>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>

    </Grid>
</Window>
