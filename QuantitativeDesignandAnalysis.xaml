<Window x:Class="Microarchitecture.Quantitative_Design_and_Analysis"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Microarchitecture"
        mc:Ignorable="d"
        Title="Quantitative_Design_and_Analysis" Height="514" Width="840" MaxWidth="840" MaxHeight="514">
    <Window.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0"/>
            <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
        </LinearGradientBrush>
    </Window.Background>
    <Grid MaxWidth="832" MaxHeight="483">
        <RichTextBox HorizontalAlignment="Left" Height="466" Margin="12,7,0,0" VerticalAlignment="Top" Width="797" TextChanged="RichTextBox_TextChanged">
            <FlowDocument>
                <Paragraph BorderBrush="Black" BorderThickness="0,0,0,1" FontWeight="Bold" FontSize="17.3333333333333" FontFamily="Cambria" Margin="0,13.33,0,0" Padding="1.33" TextAlignment="Left">
                    <Run Foreground="#FF4F81BD" FontSize="12" Text="Overview Chapter 1: Fundamentals of Quantitative Design and Analysis"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0,16,0,13.33" TextAlignment="Justify">
                    <Run FontSize="10" Text="High level concepts of a computer's design such as memory system, memory interconnect and the design of an internal processor or CPU is termed as the organization or the micro-architecture of the computer. The switch to multiple processors per microprocessor led to the term core also being used for processors. The specifics of a computer including a detailed logic design and packaging technology of the computer is referred to as Hardware.  The term architecture refers to instruction set architecture, organization or micro architecture and hardware.  "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0,0,0,13.33" TextAlignment="Justify">
                    <Run FontSize="10" Text="Execution time of a program is referred to as wall clock time, response time or elapsed time. The execution time includes a latency to complete task including storage accesses, memory accesses, input/output activities and operating system overhead.  Evaluation of systems include comparing the execution time of their workloads."/>
                </Paragraph>
                <Paragraph FontWeight="Bold" FontStyle="Italic" FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text="Benchmarks: "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text="Examples of benchmarks include Kernels (real applications),  Toy programs (e.g quicksort) and synthetic benchmarks such as Dhrystone. Benchmark suites are collections of benchmark applications and a popular measure of performance of processors with a variety of applications.  SPEC (Standard Performance Evaluation Corporation) is a successful attempt to create a standardized benchmark application suite.  "/>
                    <Run FontStyle="Italic" FontSize="10" Text=" Desktop benchmark: "/>
                    <Run FontSize="10" Text="SPEC benchmarks are real programs modified to be portable and minimize the effect of I/O on performance.  "/>
                    <Run FontStyle="Italic" FontSize="10" Text=" Server benchmark: "/>
                    <Run FontSize="10" Text="A simple benchmark is a processor through-put oriented benchmark SPEC CPU2017. "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                    <Run Foreground="#FF4F81BD" FontSize="12"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run Foreground="#FF4F81BD" FontWeight="Bold" FontSize="12" Text="Overview Chapter 2: Memory Hierarchy Design" TextDecorations="Underline"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text="Most computers since 1975 have used DRAM for main memory and SRAMs for cache.  Due to burst transfer memories now used in both Flash and DRAM, memory latency can be quoted with two measures – access time and cycle time.  Access time is the time between when a read is requested and a when the requested word arrives. Cycle time is the minimum time between unrelated requests to memory. "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text=" Memory technology and optimizations:  All three levels of cache (SRAM) are integrated onto the processor chip. "/>
                    <Run FontStyle="Italic" FontSize="10" Text="On-chip cache SRAM"/>
                    <Run FontSize="10" Text=" are organized with a width that matches the block size of the cache with the tags stored in parallel to each block. This allows an entire block to be read out or written into a single cycle. "/>
                    <Run FontStyle="Italic" FontSize="10" Text="DRAM technology:  "/>
                    <Run FontSize="10" Text="To reduce the cost of a package with all the necessary address lines, the solution was to multiplex the address lines thereby reducing the # of address pins in half. One half of the address is sent during the row access strobe (RAS) and the other half of the address is sent during the column access strobe (CAS). "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text="Optimizations to DRAM :    Initially DRAMs had a buffer which allowed multiple column accesses to a single row without requiring a new row access and they used an asynchronous interface, which meant that every column access and transfer involved overhead to synchronize the controller.    A clock signal is added to the DRAM interface to avoid the overheard involved with the asynchronous interface.  This is called SDRAM.    This allows the burst transfer mode where multiple transfers can occur without specifying a new column address.   The bus size of the DRAM increased from 4,8 and 16 bit buses and this overcomes the problem of getting more bandwidth from the memory as DRAM density increased. "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                </Paragraph>
                <Paragraph BorderBrush="Black" BorderThickness="0,0,0,1" FontWeight="Bold" FontSize="17.3333333333333" FontFamily="Cambria" Margin="0" Padding="1.33" TextAlignment="Left">
                    <Run Foreground="#FF4F81BD" FontSize="12" Text="Chapter 3: Instruction Level Parallelism and it's exploitation"/>
                </Paragraph>
                <Paragraph BorderBrush="Black" BorderThickness="0,0,0,1" FontWeight="Bold" FontSize="17.3333333333333" FontFamily="Cambria" Margin="0" Padding="1.33" TextAlignment="Left">
                    <Run FontWeight="Normal" FontSize="10" Text="The potential overlap among instructions is called instruction level parallelism (ILP).  Pipeline CPI = Ideal pipeline CPI + structural stalls + data hazard stalls + control stalls.   There are numerous techniques available from forwarding, bypassing, simple branch prediction and scheduling, static pipeline scheduling, score boarding, loop unrolling, dynamic scheduling, hardware speculation, trace scheduling and HW support for compiler speculation to reduce potential data and control hazards.  Pipeline CPI = ideal pipeline CPI + Structural stalls + Data hazard stalls + control stalls."/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>

    </Grid>
</Window>
